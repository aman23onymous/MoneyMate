
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import * as api from '../../api/index'; 


export const getAccounts = createAsyncThunk(
  // Action type prefix: 'accounts/getAccounts'
  'accounts/getAccounts',
  // The payload creator function
  async (_, { rejectWithValue }) => {
    try {
      // Call the getAccounts function from your api/index.js file.
      const { data } = await api.getAccounts();
      
      return data;
    } catch (error) {
      
      const message = error.response?.data?.message || error.message || 'Failed to fetch accounts';
      // Return the error message using rejectWithValue. This becomes the 'rejected' action's payload.
      return rejectWithValue(message);
    }
  }
);


export const createAccount = createAsyncThunk(
  // Action type prefix: 'accounts/createAccount'
  'accounts/createAccount',
  // The payload creator function. It receives the accountData and the thunkAPI object.
  async (accountData, { dispatch, rejectWithValue }) => {
    try {
      // Call the createAccount function from your api/index.js file.
      const { data } = await api.createAccount(accountData);
      
      // IMPORTANT: After successfully creating an account, we immediately dispatch
      // the getAccounts action to fetch the updated list, ensuring the UI is always in sync.
      dispatch(getAccounts()); 
      
      // Return the success message from the backend.
      return data.message;
    } catch (error) {
      // If the API call fails, return a useful error message.
      const message = error.response?.data?.message || error.message || 'Failed to create account';
      return rejectWithValue(message);
    }
  }
);



// Define the initial state for the accounts feature.
const initialState = {
  accounts: [],      // An array to hold the user's account objects.
  isLoading: false,  // A boolean to track loading status, useful for showing spinners.
  error: null,       // A string to hold any error messages from the API.
  message: null,     // A string for non-error feedback, like "Account created successfully".
};

const accountsSlice = createSlice({
  // The name of the slice. This is used as a prefix for the generated action types.
  name: 'accounts',
  // The initial state for this slice.
  initialState,
  // Reducers for synchronous actions (actions that don't involve API calls).
  reducers: {
    // A reducer to clear any existing error or message from the state.
    clearAccountState: (state) => {
      state.error = null;
      state.message = null;
    },
  },
  // extraReducers handle actions defined outside the slice, like our async thunks.
  // We use the builder syntax with .addMatcher for a cleaner, more scalable approach.
  extraReducers: (builder) => {
    builder
      // This matcher runs for ANY action from this slice that is 'pending'.
      .addMatcher(
        (action) => action.type.startsWith('accounts/') && action.type.endsWith('/pending'),
        (state) => {
          state.isLoading = true; // Set loading to true.
          state.error = null;     // Clear previous errors.
          state.message = null;   // Clear previous messages.
        }
      )
      // This matcher runs for ANY action from this slice that is 'rejected'.
      .addMatcher(
        (action) => action.type.startsWith('accounts/') && action.type.endsWith('/rejected'),
        (state, action) => {
          state.isLoading = false;        // Set loading to false.
          state.error = action.payload; // Set the error message from the action's payload.
        }
      )
      // This matcher runs ONLY when the getAccounts thunk is 'fulfilled'.
      .addMatcher(
        (action) => action.type === 'accounts/getAccounts/fulfilled',
        (state, action) => {
          state.isLoading = false;          // Set loading to false.
          state.accounts = action.payload;  // Update the accounts array with the data from the API.
        }
      )
      // This matcher runs ONLY when the createAccount thunk is 'fulfilled'.
      .addMatcher(
        (action) => action.type === 'accounts/createAccount/fulfilled',
        (state, action) => {
          // Note: isLoading is NOT set to false here because the getAccounts() thunk
          // was dispatched immediately after, so the state is still technically loading the new list.
          // The loading state will be properly set to false by the getAccounts/fulfilled action.
          state.message = action.payload; // Set the success message, e.g., "Account created successfully".
        }
      );
  },
});

// Export the synchronous action creators generated by createSlice.
export const { clearAccountState } = accountsSlice.actions;

// Export the reducer function, which will be added to the main Redux store.
export default accountsSlice.reducer;
